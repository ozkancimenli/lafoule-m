name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: |
          echo "Starting Next.js build..."
          echo "Current working directory:"
          pwd
          echo "Directory contents before build:"
          ls -la
          
          # Run build with more verbose output
          npm run build
          BUILD_EXIT_CODE=$?
          
          echo "Build exit code: $BUILD_EXIT_CODE"
          echo "Directory contents after build:"
          ls -la
          
          echo "Checking for .next directory:"
          if [ -d ".next" ]; then
            echo "✅ .next directory found"
            echo "Size of .next directory:"
            du -sh .next/
            echo "Contents of .next directory:"
            ls -la .next/
          else
            echo "❌ .next directory not found"
            echo "Searching for .next directory:"
            find . -name ".next" -type d 2>/dev/null || echo "No .next directory found anywhere"
            echo "All directories containing 'next':"
            find . -name "*next*" -type d 2>/dev/null || echo "No directories containing 'next' found"
          fi
          
          # Exit with build status
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "❌ Build failed with exit code $BUILD_EXIT_CODE"
            exit $BUILD_EXIT_CODE
          fi
          
          echo "✅ Build completed successfully"
        env:
          NODE_ENV: production
          NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID || '' }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || '' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || '' }}
          NEXT_PUBLIC_ADMIN_PASSWORD: ${{ secrets.NEXT_PUBLIC_ADMIN_PASSWORD || 'default_password' }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://ozkancimenli.com' }}
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY || '' }}

      - name: Verify build output
        run: |
          echo "Verifying build output..."
          echo "Current working directory:"
          pwd
          echo "Directory contents:"
          ls -la
          if [ ! -d ".next" ]; then
            echo "❌ Error: .next directory not found after build"
            echo "Searching for .next directory:"
            find . -name ".next" -type d 2>/dev/null || echo "No .next directory found"
            exit 1
          fi
          echo "✅ Build output verified: .next directory exists"
          echo "Build size:"
          du -sh .next/
          echo "Contents of .next directory:"
          ls -la .next/

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: Verify Vercel secrets
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "❌ VERCEL_TOKEN secret is not set"
            exit 1
          fi
          if [ -z "$VERCEL_ORG_ID" ]; then
            echo "❌ VERCEL_ORG_ID secret is not set"
            exit 1
          fi
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "❌ VERCEL_PROJECT_ID secret is not set"
            exit 1
          fi
          echo "✅ All Vercel secrets are configured"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN || '' }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID || '' }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID || '' }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'